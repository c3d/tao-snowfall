// *****************************************************************************
// snowfall.xl                                                     Tao3D project
// *****************************************************************************
//
// File description:
//
//    Create a snowfall effect.
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3
// (C) 2012-2014, Baptiste Soulisse <baptiste.soulisse@taodyne.com>
// (C) 2013, Catherine Burvelle <catherine@taodyne.com>
// (C) 2013-2014,2019, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2012-2014, Jérôme Forissier <jerome@taodyne.com>
// *****************************************************************************
// This file is part of Tao3D
//
// Tao3D is free software: you can r redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tao3D is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tao3D, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

module_description
    id "0af91628-5e55-4376-8543-91f12aee5cb7"
    name "Snowfall"
    description "Allow to add a snowfall effect into a presentation."
    import_name "Snowfall"
    author "Taodyne SAS"
    website "http://www.taodyne.com"
    version 1.004

module_description "fr",
    name "Neige tombante"
    description "Permet d'ajouter un effet de neige tombante dans une présentation."


import Animate
import PointCloud

// Adding this module's images/ directory to the image: search path
// for the current document
add_search_path "Snowfall:", module_dir & "/images"

// ============================================================================
//
//                               GLOBAL SETTINGS
//
// ============================================================================

SNOW_OFFSET -> 1500.0     // Snowfall offset
SNOW_POSITION_1 -> 0.0    // Position of first set of snowcloud
SNOW_POSITION_2 -> 1500.0 // Position of second set of snowcloud

SNOW_SPEED -> 2.0   // Snowflake velocity
SNOW_NUMBER -> 7000 // Snowflake number
SNOW_SIZE -> 6.0    // Snowflake size
SNOW_WIND -> 0.0    // Snow wind

// Snowflake image
SNOWFLAKE -> "Snowfall:snowflake.png"


// ============================================================================
//
//                                  FUNCTIONS
//
// ============================================================================

snowflake T:text ->
// ----------------------------------------------------------------------------
//   Change the image used as snowflake
// ----------------------------------------------------------------------------
    SNOWFLAKE := T


snowwind S:real ->
// ----------------------------------------------------------------------------
//   Add wind to the snowfall effect
// ----------------------------------------------------------------------------
    SNOW_WIND := S
    if S < -1.0 then
        SNOW_WIND := -1.0
    if S > 1.0 then
        SNOW_WIND := 1.0


snowfall ->
// ----------------------------------------------------------------------------
//   Shortcut to create easily a nice snowfall effect
// ----------------------------------------------------------------------------
    snowfall 2.0, 6.0, 7000


snowfall V:real, S:real, N:integer ->
// ----------------------------------------------------------------------------
//   Create the snowfall effect
// ----------------------------------------------------------------------------
    locally
        if (S >= 0) and (V >= 0) and (N >= 0) then
            SNOW_SPEED := V
            SNOW_NUMBER := N
            SNOW_SIZE := S
            rotatez 80 * SNOW_WIND
            color "white"
            texture SNOWFLAKE
            blend_function "SRC_ALPHA", "ONE"
            disable_depth_test
            locally
                translatey SNOW_POSITION_1
                SNOW_POSITION_1 := SNOW_POSITION_1 - SNOW_SPEED
                page_time
                if SNOW_POSITION_1 < -SNOW_OFFSET then
                    SNOW_POSITION_1 := SNOW_OFFSET
                snow_clouds
            locally
                translatey SNOW_POSITION_2
                SNOW_POSITION_2 := SNOW_POSITION_2 - SNOW_SPEED
                page_time
                if SNOW_POSITION_2 < -SNOW_OFFSET then
                    SNOW_POSITION_2 := SNOW_OFFSET
                snow_clouds


snowpack -> snowpack 0, 75-540, 1920, 150, 10
// ----------------------------------------------------------------------------
//   Default values for snowpack
// ----------------------------------------------------------------------------


snowpack X:integer, Y:integer, W:integer, H:integer, N:integer ->
// ----------------------------------------------------------------------------
//   Create a snow pack
// ----------------------------------------------------------------------------
    data snowpack_height
    snowpack_column -> 0
    snowpack_width -> 960

    locally
        snowpack_width := W/2
        init_snowpack_height with -snowpack_width..snowpack_width
        snowpack_column := 0
        init_snowpack_height C:integer ->
            snowpack_column := C
            snowpack_height[snowpack_column] := 0+0

    locally
        color "white"
        canvas "snowpack", W, H,
            time
            color "white", 0.3
            blend_function "SRC_ALPHA", "ONE"
            disable_depth_test
            translatey -H/2
            add_snowflake with 1..N
            add_snowflake N:integer ->
                snowpack_column := snowpack_column + random(-50,50) - snowpack_column/250
                if snowpack_column > snowpack_width then
                    snowpack_column := snowpack_width
                if snowpack_column < -snowpack_width then
                    snowpack_column := -snowpack_width
                snowpack_height_increase snowpack_height[snowpack_column]
            snowpack_height_increase Height:integer ->
                Height := Height + 1
                image snowpack_column, 0.4 * Height, 0.03, 0.03, "Snowfall:SnowFlake.png"

        rectangle X, Y, W, H





// ============================================================================
//
//                                   PRIVATE
//
// ============================================================================

snow_clouds ->
// ----------------------------------------------------------------------------
//   Create differents sorts of snowcloud
// ----------------------------------------------------------------------------
    locally
        rotatey 5 + SNOW_SPEED * sin (1/5.0 * page_time)
        snow_cloud SNOW_SIZE / 2.0
    locally
        rotatey 10 + 2 * SNOW_SPEED * sin (1/5.0 * page_time)
        snow_cloud SNOW_SIZE
    locally
        translatez 75
        snow_cloud SNOW_SIZE * 1.5
    locally
        translatez 150
        snow_cloud SNOW_SIZE * 2.0


snow_cloud Size:real ->
// ----------------------------------------------------------------------------
//   Create a snowcloud of a given size
// ----------------------------------------------------------------------------
    locally
        scale 2 * SNOW_OFFSET, SNOW_OFFSET, SNOW_OFFSET
        translate -0.5, -0.5, 0.0
        cloud_random "Snow" & text Size, integer (SNOW_NUMBER / Size)
        cloud_point_size "Snow" & text Size, Size
        cloud_point_sprites "Snow" & text Size, true
        cloud "Snow" & text Size
